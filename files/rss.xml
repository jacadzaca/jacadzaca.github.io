<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>jaca's safe haven</title>
        <description>Updates from jaca's safe haven</description>
        <language>en</language>
        <link>https://jacadzaca.github.io/rss.xml</link>
        <atom:link href="https://jacadzaca.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <image>
            <title>jaca's safe haven</title>
            <url>https://jacadzaca.github.io//files/images/avatar.avif</url>
            <link>https://jacadzaca.github.io/rss.xml</link>
        </image>
            <item>
                <title>simple code generator</title>
                <guid>https://jacadzaca.github.io/blog/simple_code_generator.html</guid>
                <link>https://jacadzaca.github.io/blog/simple_code_generator.html</link>
                <pubDate>Thu, 18 Aug 2022 15:11:49 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>simple code generator</h1>
                <p>Last semester I was taking a mandatory "Programming
                101" course, aka. drawing stairs made out of stars and
                watching my classmates struggle with basic tasks, the
                course - a time truly well spent. Even though the course
                problems weren’t too enlightening, the silliness of one
                of the tasks’ requirements gave me a chance to write a
                simple code generator.</p>
                <h2 id="problem">Problem</h2>
                <p>Without using an associative table (they weren’t
                covered in class), write a program that encodes a
                message using <a
                href="https://en.wikipedia.org/wiki/Morse_code"
                target="_blank">morse code</a>. The characters should
                map as follow (yes, a picture; who needs copy-paste
                anyway?):</p>
                <hr />
                <p><a
                href="/files/images/simple_code_generator/morse_code_mapping.avif"
                target="_blank"><img
                src="/files/images/simple_code_generator/morse_code_mapping.avif"
                title="ASCII to morse mapping" loading="lazy"
                alt="ASCII to morse mapping" /></a></p>
                <hr />
                <h2 id="implementation">Implementation</h2>
                <p>First, I looked online for the table in a <a
                href="https://stackoverflow.com/questions/48563810/why-does-my-morse-code-converter-display-no-output"
                target="_blank">text format</a>, downloaded it and,
                using a <a href="https://vim.fandom.com/wiki/Macros"
                target="_blank">vim macro</a>, formatted it so that each
                line would contain one of the ASCII symbols and its
                Morse representation separated by a space. Since I
                wanted to use <a
                href="https://www.tutorialspoint.com/unix_commands/envsubst.htm"
                target="_blank">envsubst</a>, I created a file like
                so:</p>
                <div class="sourceCode" id="cb1"><pre
                class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="cf">if</span> <span class="kw">(</span><span class="ex">morse_representation</span> == <span class="st">&quot;</span><span class="va">${CASE}</span><span class="st">&quot;</span><span class="kw">)</span> <span class="kw">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">&#39;${VALUE}&#39;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span></code></pre></div>
                <p>Then, I wrote a script that reads each line from the
                ‘translation file’, and places the Morse representation
                inside the <em>if’s</em> condition and the ASCII symbol
                next to the <em>return</em> statement:</p>
                <div class="sourceCode" id="cb2"><pre
                class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">#!/usr/bin/env sh</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="bu">read</span> <span class="va">line</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">line</span><span class="op">=</span><span class="va">($line)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">export</span> <span class="va">CASE</span><span class="op">=</span><span class="va">${line</span><span class="op">[</span><span class="dv">1</span><span class="op">]</span><span class="va">}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">export</span> <span class="va">VALUE</span><span class="op">=</span><span class="va">${line</span><span class="op">[</span><span class="dv">0</span><span class="op">]</span><span class="va">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">truncate</span> <span class="at">-s-1</span> from_morse_code.cc</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="ex">envsubst</span> <span class="op">&lt;</span> switch_case.cc <span class="op">&gt;&gt;</span> from_morse_code.cc</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">done</span> <span class="op">&lt;</span> morse_code.txt</span></code></pre></div>
                <p>I ran it, ran it again with the values of the
                <em>CASE</em> and <em>VALUE</em> variables switched as
                to generate the other way translation, removed the
                unneeded <em>elses</em> at the bottom, copy-pasted the
                big <em>if</em> chains into the file where I would write
                the wrapper code... and voila! An hour of time was just
                saved (if you’re not counting the hour it took me to
                write this lol)!</p>
             ]]>
                </description>
            </item>
            <item>
                <title>website update 2</title>
                <guid>https://jacadzaca.github.io/blog/website_update_2.html</guid>
                <link>https://jacadzaca.github.io/blog/website_update_2.html</link>
                <pubDate>Wed, 17 Aug 2022 16:21:19 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>website update 2</h1>
                <ol type="1">
                <li>the site’s layout was completely overhauled, <a
                href="/" target="_blank">see for yourself</a></li>
                <li>there’s fancy, new, CSS only ‘slider’ on the <a
                href="/bookmarks.html" target="_blank">bookmarks
                page</a></li>
                <li>added a table of contents to the rolling blog
                page</li>
                <li>added a light and a dark theme throught CSS, <a
                href="https://wiki.archlinux.org/title/Chromium#Dark_mode"
                target="_blank">how to enable dark mode in
                Chromium</a></li>
                <li>fixed RSS’ date attribute on posts</li>
                <li>broke RSS - old posts may appear as new</li>
                <li>website’s RSS will be moved to <a
                href="/files/rss.xml" target="_blank">here</a></li>
                <li>the ‘link’ buttons on the blog page now takes you to
                the article’s title</li>
                <li>the posts are now written in markdown and then
                converted with pandoc to HTML so you can read them in
                plain markdown under /files/markdown/posts/POST-NAME, <a
                href="/files/markdown/posts/website_update_2.md"
                target="_blank">here’s this post</a> If you really want,
                you can even read them in PDF, assuming <a
                href="https://pandoc.org/" target="_blank">pandoc</a>
                and <a href="https://pwmt.org/projects/zathura/"
                target="_blank">zathura</a> are installed:</li>
                </ol>
                <div class="sourceCode" id="cb1"><pre
                class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="ex">pandoc</span> <span class="at">-o</span> <span class="at">-</span> <span class="at">--to</span> pdf <span class="at">--from</span> markdown https://jacadzaca.github.io/files/markdown/posts/website_update_2.md <span class="kw">|</span> <span class="ex">zathura</span> <span class="at">-</span></span></code></pre></div>
                <ol start="10" type="1">
                <li>reworded the <a href="/blog/browser_dark_mode.html"
                target="_blank">dark mode article</a></li>
                <li>there’s a <a href="/donate.html"
                target="_blank">donation page</a> now</li>
                </ol>
                <p>Criticism or ideas are welcome.</p>
             ]]>
                </description>
            </item>
            <item>
                <title>generating a maths worksheet</title>
                <guid>https://jacadzaca.github.io/blog/generating_a_maths_worksheet.html</guid>
                <link>https://jacadzaca.github.io/blog/generating_a_maths_worksheet.html</link>
                <pubDate>Sat, 19 Feb 2022 16:53:33 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>generating a maths worksheet</h1>
                <h2 id="inspiration">Inspiration</h2>
                <p>When you get a maths worksheet, it usually comes with
                the answers to the problems from each section, so you
                can check your work - pretty nifty. However, it turns
                out that’s not the way they do it at my university.
                Passing semester, I had to trudge through <em>a ton</em>
                of answerless worksheets, which made studying much more
                time-consuming, since I had to spend extra minute or two
                <em>per example</em> inputting the equation into <a
                href="https://www.symbolab.com/"
                target="_blank">Symbolab</a>, or googling for the
                solution. Let for minor annoyances, when I couldn’t
                input some problem into Symbolab or when it <a
                href="https://www.symbolab.com/solver/step-by-step/%5Clim_%7Bx%5Cto0%7D%5Cleft(%5Cfrac%7Bsin%5Cleft(x%5Cright)%7D%7Bx%7D%5Cright)?or=input"
                target="_blank">spouted out gibberish</a>, I finished
                the semester less than unharmed - I got inspired.
                Leaving the question of whether not handing out
                answer-sheets was just a big <a
                href="https://www.urbandictionary.com/define.php?term=psyop"
                target="_blank">psyop</a> by my instructors to to force
                students into creating study groups for another time, I
                decided I would generate my own worksheets (without
                blackjack and hookers... sadly).</p>
                <h2 id="how">How?</h2>
                <p><a
                href="https://www.wolframalpha.com/problem-generator/"
                target="_blank">Wolfram’s Problem Generator</a> claims
                to be using AI to generate the problem sheets, <a
                href="https://mathsbot.com/generators/textbook"
                target="_blank">mathsbot</a> probably uses some database
                of predefined questions. Shouldn’t writing a maths
                worksheet generator be complicated? or at least time
                consuming? Also, don’t you need someone to handout
                answers? With the right software and mindset - no, no
                and no. If we think about it, maths worksheets are just
                permutations of different symbols. We can generate these
                just fine, for example with python’s <a
                href="https://docs.python.org/3/library/itertools.html#itertools.product"
                target="_blank">itertools</a> or <a
                href="https://docs.python.org/3/library/random.html"
                target="_blank">random</a> module. Now, since a
                worksheet usually comes with an answers section, we will
                also be needing a way of evaluating the generated
                expressions, luckily there’s a <a
                href="https://en.wikipedia.org/wiki/Computer_algebra_system"
                target="_blank">whole bunch of software that dose
                this</a>, for example, <a href="https://www.sympy.org/"
                target="_blank">sympy</a>. To present the worksheets we
                can generate a <a href="https://www.latex-project.org/"
                target="_blank">LaTeX</a> document via <a
                href="https://jinja.palletsprojects.com/"
                target="_blank">jinja</a> and then compile it with, for
                example, <a
                href="https://man.archlinux.org/man/pdftex.1"
                target="_blank">pdflatex</a>.</p>
                <h2 id="implementation">Implementation</h2>
                <p>For simplicity, we’ll write a quadratics worksheet
                generator. First, we’ll need a function that spouts out
                quadratics, we would like the generator to:</p>
                <ol type="1">
                <li>differentiate quadratics on basis of the number of
                solutions, because a worksheet with, for example, only
                two solutions quadratics would be
                boring/incomprehensive,</li>
                <li>ensure that the quadratic’s coefficients are not to
                crazy - in the end it’s humans that will be solving the
                equations.</li>
                </ol>
                <p>To achieve the first goal, we’ll split the function
                into three. Second one will require making some simple
                observations:</p>
                <ol type="1">
                <li>it’s more difficult to randomize fraction
                coefficents, so random coefficients will only be
                integers,</li>
                <li>coefficients should be bounded,</li>
                <li>it’s easier to generate positive integers and then
                to pick a sign</li>
                <li>we know that a quadratic has two solutions, if and
                only if its <a
                href="https://en.wikipedia.org/wiki/Discriminant#Degree_2"
                target="_blank">discriminant is positive</a>, so given a
                quadratic of the form: <em>ax<sup>2</sup> + bx + c ∧ a ≠
                0</em>, with two different solutions, we can write:
                <em>b<sup>2</sup>⁄<sub>4a</sub> &gt; c</em>. Since we
                are looking for an integer upper-bound for <em>a</em>
                and <em>c</em>, lets set <em>c &gt; 2</em>, therefore
                <em>b<sup>2</sup>⁄<sub>8</sub> &gt; a</em>,</li>
                <li>for a quadratic to have one solution, it’s
                discriminant must equal zero, so if we pick <em>a</em>
                and <em>c</em>, <em>b = √<span
                style="text-decoration: overline">4ac</span></em>, since
                this could produe complicated coefficients, let’s
                require <em>a</em> and <em>c</em> to be perfect
                squares.</li>
                </ol>
                <p>Figuring out bounds for no-solutions quadratics is
                left as an exercise for the reader. Translating the
                observations into python code:</p>
                <div class="sourceCode" id="cb1"><pre
                class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> math</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sympy</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> random</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    SIGN <span class="op">=</span> [<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>]</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> generate_quadratic_two_solutions(max_coefficient<span class="op">=</span><span class="dv">20</span>):</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        b <span class="op">=</span> random.randint(<span class="dv">3</span>, max_coefficient)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        a <span class="op">=</span> random.randint(<span class="dv">1</span>, (b<span class="op">**</span><span class="dv">2</span>)<span class="op">//</span><span class="dv">8</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        c <span class="op">=</span> random.randint(<span class="dv">1</span>, (b<span class="op">**</span><span class="dv">2</span>)<span class="op">//</span>(<span class="dv">4</span><span class="op">*</span>a))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> sympy.sympify(<span class="ss">f&#39;</span><span class="sc">{</span>a<span class="sc">}</span><span class="ss">*x**2 + </span><span class="sc">{</span>b<span class="sc">}</span><span class="ss">*x + </span><span class="sc">{</span>c<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> generate_quadratic_one_solution(max_coefficient<span class="op">=</span><span class="dv">20</span>):</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        sign <span class="op">=</span> random.choice(SIGN)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        a, c <span class="op">=</span> sign <span class="op">*</span> random.randint(<span class="dv">1</span>, max_coefficient)<span class="op">**</span><span class="dv">2</span>, sign <span class="op">*</span> random.randint(<span class="dv">1</span>, max_coefficient)<span class="op">**</span><span class="dv">2</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        b <span class="op">=</span> <span class="bu">int</span>(math.sqrt(<span class="dv">4</span><span class="op">*</span>a<span class="op">*</span>c))</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> sympy.sympify(<span class="ss">f&#39;</span><span class="sc">{</span>a<span class="sc">}</span><span class="ss">*x**2 + </span><span class="sc">{</span>b<span class="sc">}</span><span class="ss">*x + </span><span class="sc">{</span>c<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> generate_quadratic_zero_solutions(max_coefficient<span class="op">=</span><span class="dv">20</span>):</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        sign <span class="op">=</span> random.choice(SIGN)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>        a, c <span class="op">=</span> sign <span class="op">*</span> random.randint(<span class="dv">1</span>, max_coefficient), sign <span class="op">*</span> random.randint(<span class="dv">1</span>, max_coefficient)</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        b <span class="op">=</span> math.sqrt(random.randint(<span class="dv">1</span>, math.floor(math.sqrt(<span class="dv">4</span><span class="op">*</span>a<span class="op">*</span>c))))</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        b <span class="op">=</span> sympy.Rational(<span class="bu">str</span>(math.trunc(b <span class="op">*</span> <span class="dv">10</span>)<span class="op">/</span><span class="dv">10</span>))</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> sympy.sympify(<span class="ss">f&#39;</span><span class="sc">{</span>a<span class="sc">}</span><span class="ss">*x**2 + </span><span class="sc">{</span>b<span class="sc">}</span><span class="ss">*x + </span><span class="sc">{</span>c<span class="sc">}</span><span class="ss">&#39;</span>)</span></code></pre></div>
                <p>Wait a minute, problems in a worksheet are usually
                ordered by difficulty - the further the problem, the
                more difficult it is. I couldn’t come up with any
                <strong>solid</strong> way of evaluating a quadratic’s
                difficulty, based on it’s coefficients, so I went
                with:</p>
                <div class="sourceCode" id="cb2"><pre
                class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> quadratic_difficulty_comperator(x):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">sum</span>(x.as_coefficients_dict().values())</span></code></pre></div>
                <p>Now onto generating a LaTeX document. Luckily, <a
                href="https://docs.sympy.org/latest/tutorial/printing.html#mathrm-latex"
                target="_blank">sympy has a built-in LaTeX
                converter</a>, so we’ll only need to instiate <a
                href="https://jinja2docs.readthedocs.io/en/stable/api.html#basics"
                target="_blank">jinja</a> and put toghether a <a
                href="https://raw.githubusercontent.com/jacadzaca/zadanko/master/zadanko/templates/problem_sheet.jinja.tex"
                target="_blank">template</a>:</p>
                <div class="sourceCode" id="cb3"><pre
                class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">#!/usr/bin/env python3</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> math</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> random</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> collections</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sympy</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="im">from</span> jinja2 <span class="im">import</span> Environment, FileSystemLoader</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">#...quadratic generating code ommited for breviety...#</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    Task <span class="op">=</span> collections.namedtuple(<span class="st">&#39;Task&#39;</span>, [<span class="st">&#39;instruction&#39;</span>, <span class="st">&#39;problems&#39;</span>, <span class="st">&#39;awnsers&#39;</span>])</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    ENV <span class="op">=</span> Environment(</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        loader<span class="op">=</span>FileSystemLoader(<span class="st">&#39;.&#39;</span>),</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        trim_blocks<span class="op">=</span><span class="va">True</span>,</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        lstrip_blocks<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> main():</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        <span class="co"># generate diffrent kinds of quadratic equations</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        zero_solutions_quadratics <span class="op">=</span> [quadratics.generate_quadratic_zero_solutions() <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>)]</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        one_solution_quadratics <span class="op">=</span> [quadratics.generate_quadratic_one_solution() <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>)]</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        two_solutions_quadratics <span class="op">=</span> [quadratics.generate_quadratic_two_solutions() <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">6</span>)]</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        <span class="co"># sort them according to &#39;difficulty&#39; - the greater the sum of quadratic&#39;s coefficients, the more difficult it is</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        zero_solutions_quadratics.sort(key<span class="op">=</span>quadratics.quadratic_difficulty_comperator)</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        one_solution_quadratics.sort(key<span class="op">=</span>quadratics.quadratic_difficulty_comperator)</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        two_solutions_quadratics.sort(key<span class="op">=</span>quadratics.quadratic_difficulty_comperator)</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        <span class="co"># arrange the problems in random order, but try to keep the problems&#39; difficulty incremental</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        problem_lists <span class="op">=</span> [zero_solutions_quadratics, one_solution_quadratics, two_solutions_quadratics]</span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        problems <span class="op">=</span> []</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(zero_solutions_quadratics) <span class="op">+</span> <span class="bu">len</span>(one_solution_quadratics) <span class="op">+</span> <span class="bu">len</span>(two_solutions_quadratics)):</span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>            choice <span class="op">=</span> random.choice(problem_lists)</span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>            problems.append(choice.pop())</span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="kw">not</span> choice:</span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>                problem_lists.remove(choice)</span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>        <span class="co"># generate the awnsers with sympy https://docs.sympy.org/latest/index.html</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>        awnsers <span class="op">=</span> (sympy.printing.latex((sympy.solvers.solveset(quadratic, domain<span class="op">=</span>sympy.S.Reals))) <span class="cf">for</span> quadratic <span class="kw">in</span> problems)</span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>        <span class="co"># convert into LaTeX</span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>        problems <span class="op">=</span> <span class="bu">map</span>(sympy.printing.latex, problems)</span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>        <span class="co">#output latex code</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>        latex <span class="op">=</span> ENV.get_template(<span class="st">&#39;problem_sheet.jinja.tex&#39;</span>).render(tasks<span class="op">=</span>[Task(<span class="st">&#39;Find the roots of function $f$, given by expression:&#39;</span>, problems, awnsers)])</span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(latex)</span>
<span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&#39;__main__&#39;</span>:</span>
<span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>        main()</span></code></pre></div>
                <p>To compile and view the document, we can use:</p>
                <pre class="shell"><code>    ./worksheet.py | pdflatex --jobname worksheet --output-directory /tmp &amp;&amp; zathura /tmp/worksheet.pdf</code></pre>
                <h2 id="more">More</h2>
                <p>Slightly modifed version of this script can be found
                <a href="https://github.com/jacadzaca/zadanko"
                target="_blank">here</a>, along with scripts generating
                worksheets on <a
                href="https://raw.githubusercontent.com/jacadzaca/zadanko/master/examples/generate_differentiation_worksheet.py"
                target="_blank">differentiation</a>, <a
                href="https://raw.githubusercontent.com/jacadzaca/zadanko/master/examples/generate_integration_worksheet.py"
                target="_blank">integration</a> and <a
                href="https://raw.githubusercontent.com/jacadzaca/zadanko/master/examples/generate_limit_worksheet.py"
                target="_blank">limits</a>. Example worksheet generated
                with the script can be found <a
                href="https://file.enum.run/e8d4b8c0bdfa9554/example_worksheet.pdf"
                target="_blank">here</a>. If you write a simillar script
                on some other math topic, for exmaple function graphing
                or trig equations, feel free to issue a <a
                href="https://github.com/jacadzaca/zadanko/pulls"
                target="_blank">pull request :)</a>. I will also gladly
                accept <a
                href="mailto:vitouejj@gmail.com?subject=Worksheet%20generator%20script%20-%20%5BINSERT%20NAME%5D"
                target="_blank">links</a> to simillar repositories and
                include them in <a
                href="https://github.com/jacadzaca/zadanko#readme"
                target="_blank">zadanko’s README</a>.</p>
             ]]>
                </description>
            </item>
            <item>
                <title>website update</title>
                <guid>https://jacadzaca.github.io/blog/website_update.html</guid>
                <link>https://jacadzaca.github.io/blog/website_update.html</link>
                <pubDate>Fri, 11 Feb 2022 17:38:02 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>website update</h1>
                <ol type="1">
                <li>there’s a link to my <a href="https://codeberg.org/"
                target="_blank">Codeberg</a> account on my <a href="/"
                target="_blank">homepage</a> now</li>
                <li>all contact info was moved into the ‘Contact’
                drop-down menu on the</li>
                <li>I’ve replaced the ‘webring’ page with a ‘Links’
                drop-down menu on my homepage</li>
                <li>images’ backgrounds now fit the blog’s color scheme
                (e.g. they’re black)</li>
                <li>nearly all images were converted from PNGs into <a
                href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#avif_image"
                target="_blank">AVIFs</a></li>
                <li>images on the blog page are now <a
                href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading"
                target="_blank">loaded lazily</a></li>
                <li>I’ve changed my <a href="/images/avatar.avif"
                target="_blank">avatar</a> (I still have a copy of the
                silly badger - don’t worry)</li>
                <li>I’ve added an <a
                href="/images/favicons/1250x1250.jpg"
                target="_blank">favicon</a></li>
                <li>mathematical equations are now rendered with an SVG
                image</li>
                <li>code snippets are now syntax-highlighted with <a
                href="https://pygments.org/"
                target="_blank">pygments</a></li>
                <li>‘long’ code line are now wrapped</li>
                <li>I’ve added <a href="https://ogp.me/"
                target="_blank">OpenGraph</a>, <a
                href="https://loqbooq.app/blog/add-favicon-modern-browser-guide"
                target="_blank">favicon</a> [<a
                href="https://www.emergeinteractive.com/insights/detail/The-Essentials-of-FavIcons/"
                target="_blank">1</a>] and <a
                href="https://tutorials.comandeer.pl/html5-blog.html?fbclid=IwAR11hQRNjYrNUFAlnJ7zmvs7rO2oxnwvXj40dr-NaxcHfJCBVUXv4OkdNNY"
                target="_blank">some other</a> metadata tags. There’s
                also a <a
                href="https://developer.mozilla.org/en-US/docs/Web/Manifest"
                target="_blank">manifest.json</a> file now (this means
                you <em>should</em> be able to add this blog to your
                smartphone’s home-screen)</li>
                </ol>
             ]]>
                </description>
            </item>
            <item>
                <title>hacking a warcraft 3 map</title>
                <guid>https://jacadzaca.github.io/blog/hacking_a_warcraft_3_map.html</guid>
                <link>https://jacadzaca.github.io/blog/hacking_a_warcraft_3_map.html</link>
                <pubDate>Wed, 29 Dec 2021 16:15:35 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>hacking a Warcraft 3 map</h1>
                <p>I’m a big Warcraft fan. Actually, I consider Warcraft
                3 to be the best video game of all time. I like the
                story, the voice-acting (polish voice-over was great
                until Reforged), and the music fits game-play. But
                what’s best about Warcraft 3 is its universal game
                engine that combined with the powerful game editor would
                lead to creation of many unique mods. Of course, I have
                my favorite: a polish modification called
                <em>Alchemicy</em> - a combination of a hero defense and
                a crafting game. Although the mod is loads of fun, one
                aspect of it always bugged me: there are characters that
                you can only play as after either making a donation to
                the author or if you know him in-game. What’s more, the
                donation service was <a
                href="https://warrttssgames.blogspot.com/p/premium-alchemicy.html"
                target="_blank">shut-down in 2012</a> with the guy
                quting the game. Since the map is protected, meaning
                nobody can open the mod file in the editor, the
                characters seemed to have been lost to the sands of
                time... Until I figured out a way to produce a patch
                that removes the paywall.</p>
                <h2 id="protections-how-do-they-work">Protections, how
                do they work?</h2>
                <p>First, a brief introduction to the Warcraft map file
                format (w3x). For my purposes, every Warcraft 3 mod is
                basically an archive (<a
                href="https://world-editor-tutorials.thehelper.net/cat_usersubmit.php?view=42787"
                target="_blank">see here for proper docs</a>) that
                contains <a
                href="https://github.com/ChiefOfGxBxL/WC3MapTranslator#file-support"
                target="_blank">a few files</a>, each relating to
                different aspects of the mod. <a
                href="http://www.3ice.hu/blog/protect-warcraft-maps/#delete"
                target="_blank">Certain files</a> (from now on -
                <em>header files</em>) only carry data that’s required
                by the game editor to open up the map, other files are
                mandatory (for example, the map file), there also might
                be some auxiliary files; most probably custom models,
                icons or sounds. What’s crucial is that each file
                contains information that allows a human to identify it
                (e.g, the file defining custom units contains units’
                names, hitpoints etc.)</p>
                <p>All map protection software dose is remove the header
                files, therefore making the editor crush each time you
                try to open a protected map with it. It also removes the
                MPQ’s (name of the archiving format) listfile, therefore
                obfuscating files’ names.</p>
                <h2 id="the-plan">The plan</h2>
                <p>Since I’m familiar with the Warcraft ecosystem, a
                glance at the map in-game revealed that there must be a
                certain upgrade that is granted to all ‘premium’ users.
                Since all of the custom upgrades are in the
                <em>war3map.w3q</em> file, I figured that all I need to
                do is:</p>
                <p>identify the .w3q file</p>
                <p>byte patch the mod-file directly or:</p>
                <ol type="i">
                <li>convert the file into editable form</li>
                <li>make applicable changes</li>
                <li>convert the file back and patch the mod-file using
                an editor</li>
                </ol>
                <p>Sadly, this approach doesn’t work, because:</p>
                <ol type="1">
                <li>files in the MPQ are somehow compressed, so you
                cannot byte-patch them directly</li>
                <li>the MPQ’s listfile is gone, so you cannot add new
                files. You cannot replace a file without adding a
                file</li>
                <li>the .w3q files only cotains the upgrade’s definition
                (ID, description etc). The correct place to apply the
                patch is in the <em>war3map.w3u</em> file</li>
                </ol>
                <p>Luckily, the new insight allowed me to conjure an
                approach that works:</p>
                <ol type="1">
                <li>acquire a Warcraft map with a listfile - a
                template</li>
                <li>extract and identify the files inside the
                <em>Alchemicy</em> mod file</li>
                <li>make applicable changes to the <em>war3map.w3u</em>
                file</li>
                <li>replace the files inside the template with the ones
                extracted</li>
                </ol>
                <p>We are going to need:</p>
                <ol type="1">
                <li>the <a
                href="http://www.zezula.net/en/mpq/download.html"
                target="_blank">MPQ editor</a> (it runs under Wine) to
                both extract, and overwrite files found in a .w3x
                file</li>
                <li><a
                href="https://github.com/ChiefOfGxBxL/WC3MapTranslator/tree/v1.1.0"
                target="_blank">this w3x parser</a> to identify the
                files</li>
                <li><a
                href="https://www.epicwar.com/maps/download/231379/688fa38f47c622d9e3e3afddb95520c5a2a4707c64c5ec23c5ee994b1e3826f461c63b9f/Alchemicy%203.22v.w3x"
                download="" target="_blank"><em>Alchemicy</em> map
                file</a></li>
                <li>a 128 by 128, <em>Cityscape</em> tileset, Warcraft
                map to use as a template</li>
                </ol>
                <h2 id="the-implementation">The implementation</h2>
                <p>First, I downloaded one of my old, unfinished maps
                for a template. Then, I created two directories:
                <em>identified-files</em> and
                <em>unidentified-files</em> and extracted all files from
                the map (save for .blp and .mdx files) into the second
                one. Second, I noticed that it’s possible to identify
                few of the files just by either looking at them or by
                opening them in your <a href="https://neovim.io/"
                target="_blank">favorite text editor</a>:</p>
                <ol type="1">
                <li>since File00000000.w3e has an extension, it’s
                probably the war3map.w3e file</li>
                <li>by comparsion with your template map,
                File00000001.xxx is the war3map.w3i file</li>
                <li>since File00000002.xxx is fillied with strings, it
                must be the war3map.wts file</li>
                <li>since File00000003.xxx looks like computer code, it
                must be the war3map.j file</li>
                <li>since File00000007.wpm has an extension, it’s
                probably the war3map.wpm file</li>
                <li>the File0000000008.doo is either the the war3map.doo
                or the war3mapUnits.doo</li>
                <li>by comparsion with your template map,
                File00000015.xxx is the war3mapMisc.txt file</li>
                <li>by comparsion with your template map,
                File00000016.xxx is the war3mapExtra.txt file</li>
                </ol>
                <p>I renamed the identified files and moved them into
                the other directory. I also ran <a
                href="https://raw.githubusercontent.com/ChiefOfGxBxL/WC3MapTranslator/v1.1.0/examples/jsonToWar/entity/doodads.js"
                target="_blank">this example script</a> that is provided
                by the parser to figure out that the .doo file is the
                war3Map.doo file. Nearly all other files can be
                identified using <a
                href="https://gist.githubusercontent.com/jacadzaca/9f094f8aa8131278a375f5d96caeb748/raw/4be413027c1444b3e9ebf27d6306258371e05cd5/check.sh"
                target="_blank">this script</a>, after applying this
                ‘patch’ inside the
                <em>WC3MapTranslator/examples/warToJson</em>
                directory:</p>
                <p><code>find . -name '*js' -exec sed -i -e 's|fs.writeFileSync(jsonPath, |console.log(|g' {} \;</code></p>
                <p>File00000004, File00000006 and File00000012 couldn’t
                be parsed into anything sensible. I would later figure
                out that (using a method of trail and error)
                File00000004 is the .shd file and that File00000006 is
                the .mmp file. I couldn’t figure what File00000012
                is.</p>
                <p>Thirdly, I would convert both the <a href=""
                target="_blank">.w3q</a> and the <a href=""
                target="_blank">.w3u file</a> into JSON and compare
                them:</p>
                <hr />
                <p><a
                href="/files/images/hacking_a_warcraft_3_map/json_comparison.png"
                target="_blank"><img
                src="/files/images/hacking_a_warcraft_3_map/json_comparison.png"
                title="a side-by-side comparision of JSON representation of the .w3q and .w3u"
                loading="lazy"
                alt="a side-by-side comparision of JSON representation of the .w3q and .w3u" /></a></p>
                <hr />
                <p>I figured that the simplest solution would be to
                blank-out the <em>value</em> record with:</p>
                <p><code>sed -i -e 's|R000||g' units.json</code></p>
                <p>Then, I would convert the edited <a
                href="https://raw.githubusercontent.com/ChiefOfGxBxL/WC3MapTranslator/v1.1.0/examples/jsonToWar/object/units.js"
                target="_blank">JSON back into a .w3u file</a> and
                continue as planned.</p>
                <h2 id="conclusions">Conclusions</h2>
                <p>Although the patch works (see [1]), it’s somehow
                rough around (points [2-5]) the edges:</p>
                <hr />
                <p><a
                href="/files/images/hacking_a_warcraft_3_map/hero_selection_comparison.avif"
                target="_blank"><img
                src="/files/images/hacking_a_warcraft_3_map/hero_selection_comparison.avif"
                title="a side-by-side comparison of original Alchemicy map and its &#39;hacked&#39; version"
                loading="lazy"
                alt="a side-by-side comparison of original Alchemicy map and its ‘hacked’ version" /></a></p>
                <hr />
                <p>I also think it’s also worth mentioning that:</p>
                <p>although my way of identifying the files works, it
                turns out that <a
                href="http://www.zezula.net/en/mpq/war3maps.html"
                target="_blank">MPQ Editor</a> automates this
                process.</p>
                <p>although the patched map can be opened in the editor,
                the game crushes when I try to launch the map</p>
                <p>there exist <a
                href="https://www.youtube.com/watch?v=98nXuBiKVig"
                target="_blank">a program</a> that can automate the
                whole process, but:</p>
                <ol type="i">
                <li>it’s literally a sketchy, Russian program from the
                internet</li>
                <li>I’ve never seen any explanation of it’s inner
                workings</li>
                </ol>
                <p>I later used the MPQ Editor’s <em>Name Scanner</em>
                feature to fix issues [2-5], it turns out that:</p>
                <ol type="i">
                <li>File00000016 is actually war3mapSkin.txt - renaming
                the file fixes [2] and [4]</li>
                <li>one of the .blp files was the wa3mapMap.blp -
                including this file in the patch fixes [3]</li>
                <li>other .blp and .mdx files were custom models/icons -
                including them in the patch fixes [5]</li>
                </ol>
                <p><em>warcraft3mapUnit.doo</em> is a header file</p>
             ]]>
                </description>
            </item>
            <item>
                <title>are landlords cringe</title>
                <guid>https://jacadzaca.github.io/blog/are_landlords_cringe.html</guid>
                <link>https://jacadzaca.github.io/blog/are_landlords_cringe.html</link>
                <pubDate>Wed, 22 Dec 2021 19:04:05 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>are landlords cringe?</h1>
                <p>I’ve noticed that the contempt for <a
                href="https://www.youtube.com/watch?v=6fBA2CBurVg"
                target="_blank">landlords</a> (<a
                href="https://www.youtube.com/watch?v=mDfRl6dJcYI"
                target="_blank">example in polish</a>) has recently
                reached a new level - landlord being are equated with
                social parasites, who are going to cause an <a
                href="https://www.theguardian.com/commentisfree/2018/apr/16/landlords-social-parasites-last-people-should-be-honouring-buy-to-let"
                target="_blank">overpopulation crisis in literal
                hell</a>. Surely, behind such brutal rhetoric stands
                some merit?</p>
                <h2 id="landlords-bad11">Landlords bad!1!1!</h2>
                <p>Landlords are said not to do any work - they just
                siphon others’ efforts. If you and your landlord earn a
                similar wage and you’re both saving for a new flat, it’s
                going to be your landlord that can buy it first,
                although they already have a place of their own. Albeit,
                a landlord makes sure your apartment is a decent place
                to live (e.g they call in a plumber once in a while) it
                doesn’t lessens their parasitism, because then they
                become a <a
                href="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/We_Can_Do_It%21_NARA_535413_-_Restoration_2.jpg/463px-We_Can_Do_It%21_NARA_535413_-_Restoration_2.jpg"
                target="_blank">redundant middleman</a> (it’s not rocket
                science to call a plumber). Some might claim that
                becoming a landlord actually requires much effort - you
                must take risk, familiarize yourself with the
                appropriate laws, go around searching for a property
                etc. but why someone should bother with it all? Can’t we
                organize into housing cooperatives or establish a
                government monopoly on rentiership and thus socialize
                the trouble?</p>
                <h2 id="landlords-bad">Landlords bad?</h2>
                <p>Imagine you’re moving into city of Ekslandia - let’s
                say you’ve landed a job opportunity there. You’re pretty
                sure that you won’t stay in Ekslandia for more than N
                years. Sadly, all of the established housing
                cooperatives are already full (they provide high quality
                housing, so nobody want to leave) and the ongoing
                initiatives either will take more than N years to
                provide you with a quarter (establishing an organization
                is not a timely process) or are not welcoming of total
                strangers that hardly have a job in the city <a
                href="https://en.wikipedia.org/wiki/Housing_cooperative"
                target="_blank">housing coops are allowed to select
                who’s to live with them</a>). You try applying for
                social housing, but it turns out that it favors people
                with turbulent past. Running out of options (and since
                people on the internet told you that all landlords do is
                exploit), you want to take out a loan and buy an
                apartment. You meet up with your financial adviser and
                he tells you that the loan over the N years that you
                plan to stay in the city will cost you X, however he
                also mentions that due to the growth of available
                housing alternatives, the typical rent has fallen
                drastically and it wouldn’t be hard to find a similar
                apartment that over the next N years will only cost you
                (X - 1). Since everyone can subtract, you quickly figure
                out that by renting you could actually save one unit of
                value… Since when does being exploited saves you
                money?</p>
                <h2 id="landlord-good">Landlord good???</h2>
                <p>Although the above story lays down a rather specific
                scenario (all ‘better’ options are unavailable, <a
                href="https://www.nerdwallet.com/mortgages/rent-vs-buy-calculator"
                target="_blank">renting is cheaper</a> etc.) and thus is
                not very convincing, it’s still a scenario that seems to
                presume most of the skeptics’ propositions, while
                allowing a landlord to contribute to a society.
                Basically, what a landlord does is allowing the tenant
                not to buy an apartment; if we were to let go of some
                skeptics’ tenets, e.g that housing coops are
                <em>always</em> more economically efficient, we could
                ask whether the landlord doesn’t produce value by
                elevating the tenant from the chore of attending coop’s
                board meetings? Surly, if someone is attending a board
                meeting they are not, for example, spending time with
                their family. Summarizing, we cannot conclude whether
                landlords are cringe and useless <em>ex offico</em> -
                when a landlord grants you affordable accommodation they
                are not cringe otherwise they probably are.</p>
             ]]>
                </description>
            </item>
            <item>
                <title>other way to find sin of 18</title>
                <guid>https://jacadzaca.github.io/blog/other_way_to_find_sin_of_18.html</guid>
                <link>https://jacadzaca.github.io/blog/other_way_to_find_sin_of_18.html</link>
                <pubDate>Tue, 28 Sep 2021 13:43:07 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>other way of finding sin of 18 degrees</h1>
                <p>It turns out that you can find the value of sin(18°)
                by the following method:</p>
                <p>Notice that by the sin addition formula: <a
                href="/files/images/other_way_of_finding_sin_of_18/equation1.svg"
                target="_blank"><img
                src="/files/images/other_way_of_finding_sin_of_18/equation1.svg"
                loading="lazy" /></a> Also: <a
                href="/files/images/other_way_of_finding_sin_of_18/equation2.svg"
                target="_blank"><img
                src="/files/images/other_way_of_finding_sin_of_18/equation2.svg"
                loading="lazy" /></a> Moreover, by the double cosine
                formula: <a
                href="/files/images/other_way_of_finding_sin_of_18/equation3.svg"
                target="_blank"><img
                src="/files/images/other_way_of_finding_sin_of_18/equation3.svg"
                loading="lazy" /></a> Now use the Pythagorean identity
                like this: <a
                href="/files/images/other_way_of_finding_sin_of_18/equation4.svg"
                target="_blank"><img
                src="/files/images/other_way_of_finding_sin_of_18/equation4.svg"
                loading="lazy" /></a> Now equate the right-hand side of
                equation 2° with the right-hand side of statement 1°,
                and substitute for <em>cos(36°)</em>: <a
                href="/files/images/other_way_of_finding_sin_of_18/equation5.svg"
                target="_blank"><img
                src="/files/images/other_way_of_finding_sin_of_18/equation5.svg"
                loading="lazy" /></a> Notice that for t = 1 the equation
                is satisfied, so: <a
                href="/files/images/other_way_of_finding_sin_of_18/equation6.svg"
                target="_blank"><img
                src="/files/images/other_way_of_finding_sin_of_18/equation6.svg"
                loading="lazy" /></a> Now notice that <em>1 &gt; t &gt;
                0</em>, because <em>sin(x)</em> is an increasing
                function when <em>90 &gt; x &gt; 0</em> and <em>sin(90°)
                = 1 &gt; sin(18°) &gt; sin(0°) = 0</em>, so <em>t =
                sin(18°) = <sup>(-1 + √5)</sup>⁄<sub>4</sub></em> ,
                since that’s the only solutions that meets the
                criteria</p>
                <p>While this method works, it’s not easy to come up
                with the first equation. I stumbled on it by pure
                coincidence. I personally prefer the <a
                href="/files/images/other_way_of_finding_sin_of_18/geo_sin18.avif"
                target="_blank">geometrical</a> way of finding the value
                of sin(18), because it strikes me as the more obvious
                way of doing it.</p>
             ]]>
                </description>
            </item>
            <item>
                <title>how sin is computed</title>
                <guid>https://jacadzaca.github.io/blog/how_sin_is_computed.html</guid>
                <link>https://jacadzaca.github.io/blog/how_sin_is_computed.html</link>
                <pubDate>Wed, 18 Aug 2021 14:35:08 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>how sin is computed?</h1>
                <p>I can recall the first time I wrote a program that
                used a trigonometric function - it was back in secondary
                school. I was making a game and wanted to make some
                object float around another. Back then, I didn’t know
                what trig functions were and how they worked, so I
                copied some code from the web and, to my astonishment,
                it worked. I got curious how these functions worked, so
                I pressed F3 in my IDE and tried to look for the source
                code of Math.sin. I can’t remember whether I found the
                code and didn’t understand it or whether I couldn’t find
                the implementation at all. It doesn’t really matter.
                What dose, is that back then I swore to myself that one
                day I will implement my own sin function. Two days ago,
                I’ve learned about <a
                href="https://www.khanacademy.org/math/ap-calculus-bc/bc-series-new#bc-10-11"
                target="_blank">Taylor Series</a>.</p>
                <h2 id="taylors-how-do-they-work">Taylors, how do they
                work?</h2>
                <p>Taylor series is a tool to express some function as a
                polynomial, using its nth derivative. Since
                <em>sin(x)</em> and its derivatives are differentiable,
                we can express <em>f(x) = sin(x)</em> as:</p>
                <p><a
                href="/files/images/how_sin_is_computed/taylor_equation.svg"
                target="_blank"><img
                src="/files/images/how_sin_is_computed/taylor_equation.svg"
                loading="lazy" /></a></p>
                <p>In this case, we can’t add infinitely many terms in a
                finite amount of time, so we have to approximate. Since
                this is a toy implementation, we will just compare it
                with python’s math.sin implementation and call it quits
                when they will converge <em>good enough</em>.</p>
                <h2 id="implementation">Implementation</h2>
                <p>First, we need some way of obtaining the nth
                derivative of sin, evaluated at some center <em>a</em>.
                By writing down sin’s first fifteen derivatives, we can
                see that the odd derivatives are either <em>1 *
                cos(x)</em> or <em>(-1) * cos(x)</em>, while the plural
                ones take the form of 1 * <em>sin(x)</em> or (-1) *
                <em>sin(x)</em>. What is more difficult to see, is that
                derivatives with an ordinal that yields a reminder of
                two or three when divided by four are the derivatives
                with and minus sign. I don’t know how to formally prove
                it... <em>yet</em>, but you need to trust me on this
                one. Translating into python code:</p>
                <div class="sourceCode" id="cb1"><pre
                class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> nth_sin_derivative(n, a<span class="op">=</span>math.pi<span class="op">/</span><span class="dv">2</span>):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> n <span class="op">%</span> <span class="dv">4</span> <span class="kw">in</span> (<span class="dv">2</span>,<span class="dv">3</span>):</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>            sign <span class="op">=</span> <span class="op">-</span><span class="dv">1</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            sign <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> n <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            function <span class="op">=</span> sin</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            function <span class="op">=</span> cos</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sign <span class="op">*</span> function(a)</span></code></pre></div>
                <p>Second, we need to actually be able to evaluate both
                <em>cos(x)</em> and <em>sin(x)</em> at our center. Since
                we are implementing <em>sin(x)</em>, we should deal with
                <em>cos(x)</em> first. We don’t have to implement
                <em>cos(x)</em> separately - notice that
                <em>sin(<sup>π</sup>⁄<sub>2</sub> - x) =
                cos(x)</em>:</p>
                <div class="sourceCode" id="cb2"><pre
                class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> cos(x):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> sin((math.pi<span class="op">/</span><span class="dv">2</span>) <span class="op">-</span> x)</span></code></pre></div>
                <p>Great. That solves the <em>cos(x)</em> part. Now, we
                can finally implement <em>sin(x)</em>:</p>
                <div class="sourceCode" id="cb3"><pre
                class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> sin(x, center<span class="op">=</span>math.pi<span class="op">/</span><span class="dv">2</span>, term_count<span class="op">=</span><span class="dv">5</span>):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x <span class="op">==</span> math.pi<span class="op">/</span><span class="dv">2</span>:</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">elif</span> x <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>            values <span class="op">=</span> (((x <span class="op">-</span> center)<span class="op">**</span>i <span class="op">/</span> math.factorial(i)) <span class="op">*</span> nth_sin_derivative(i, a<span class="op">=</span>center) <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(term_count))</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="bu">sum</span>(values)</span></code></pre></div>
                <p>We specify two special cases: <em>x =
                <sup>π</sup>⁄<sub>2</sub></em> for evaluating sin
                derivatives that require to compute <em>sin(x)</em> at
                center, and <em>x = 0</em> for evaluating sin
                derivatives that require to compute <em>cos(x)</em> at
                center. Else, we compute the Taylor series.</p>
                <h2 id="is-the-implementation-any-good">Is the
                implementation any good?</h2>
                <p>Well, it sure can compute <em>sin(x)</em>! With
                term_count=19 the approximation is nearly as good as the
                python’s math.sin:</p>
                <hr />
                <p><a
                href="/files/images/how_sin_is_computed/sin_taylor_series_barplot.gif"
                target="_blank"><img
                src="/files/images/how_sin_is_computed/sin_taylor_series_barplot.gif"
                loading="lazy" /></a></p>
                <hr />
                <p><a
                href="/files/images/how_sin_is_computed/sin_taylor_series.gif"
                target="_blank"><img
                src="/files/images/how_sin_is_computed/sin_taylor_series.gif"
                loading="lazy" /></a></p>
                <hr />
                <p>However, assemblies actually provide an <a
                href="https://cs.fit.edu/~mmahoney/cse3101/nasmdocb.html#section-B.4.100"
                target="_blank">fsin</a> instruction, so computing
                <em>sin(x)</em> in software when speed matters is kinda
                cringe. On the side note, CPUs don’t actually use a
                Taylor series to compute trig functions - they use <a
                href="https://en.wikipedia.org/wiki/Cordic"
                target="_blank">CORDIC</a>.</p>
                <p><a
                href="https://gist.github.com/jacadzaca/0b76d75411566d506df3d8897204e00e"
                target="_blank">Code that generates the graphs</a></p>
             ]]>
                </description>
            </item>
            <item>
                <title>transfer files with netcat</title>
                <guid>https://jacadzaca.github.io/blog/transfer_files_with_netcat.html</guid>
                <link>https://jacadzaca.github.io/blog/transfer_files_with_netcat.html</link>
                <pubDate>Tue, 27 Jul 2021 01:25:29 +0200</pubDate>
                <description>
                    <![CDATA[ 
                <h1>transfer files with netcat</h1>
                <p>As I don’t use my <a href="/blog/btw_i_use_arch.html"
                target="_blank">arch laptop</a> that much, I’ve figured
                that I can use it as a backup storage for my collections
                - collections of memes and movies.</p>
                <h2 id="rsync-is-bloat">Rsync is bloat?</h2>
                <p>Using some kind of a USB as an intermediary wouldn’t
                do the trick, because my meme collection is 14GB big
                (pathetic), whereas my movies take 139GB. My first
                though was to use <a
                href="https://rsync.samba.org/examples.html"
                target="_blank">rsync</a>. I’ve never used rsync before,
                so I perused its man page and quickly found out that you
                can use:</p>
                <pre class="shell"><code>    rsync -vzP /some/path user@remote:/some/other/path</code></pre>
                <p>to sync the files. Then... I got a ssh error. I
                couldn’t be bothered to install a ssh server on my
                laptop, because that would only bloat my precious
                <strong><em>Arch</em></strong> Linux install. I
                continued the search.</p>
                <h2
                id="rsync-is-bloat-so-lets-pipe-stuff-into-some-program">Rsync
                is bloat, so let’s pipe stuff into some program</h2>
                <p>I’ve <a
                href="https://superuser.com/questions/153176/how-to-rsync-a-large-file-with-as-little-cpu-and-bandwidth-expense-as-possible#answer-1020737"
                target="_blank">stumbled on this</a> StackOverflow
                answer. Not only does this guy have a method that would
                allow me to transfer my movies without installing a ssh
                server, but he also claims that it’s faster (rsync
                shines more when it comes to syncing <a
                href="https://fedoramagazine.org/copying-large-files-with-rsync-and-some-misconceptions/"
                target="_blank">files that are ‘similar’</a>). It turns
                out that you can compress the files with tar and then
                use netcat to send them over the network with:</p>
                <pre class="shell"><code>    tar -cpv --atime-preserve=system /path/to/ | nc -q 10 -l -p 45454</code></pre>
                <p>on the source machine, and</p>
                <pre class="shell"><code>    nc -w 10 X.X.X.X 45454 | tar -xpv</code></pre>
                <p>on the destination computer. The traffic isn’t
                encrypted at all, but that’s not a problem over LAN (e.g
                sending movies to my laptop). Albeit, <a
                href="https://screenage.de/blog/2007/12/30/using-netcat-and-tar-for-network-file-transfer/#comment-35"
                target="_blank">encryption can be provided with ssh</a>
                or <a
                href="https://screenage.de/blog/2007/12/30/using-netcat-and-tar-for-network-file-transfer/#comment-936"
                target="_blank">with a VPN</a>.</p>
                <p>I think this method is very linux-like, because it
                combines two programs in some unusual fashion to create
                something new. I might consider replacing <a
                href="https://www.man7.org/linux/man-pages/man1/scp.1.html"
                target="_blank">scp</a> with the ssh version of this
                trick.</p>
             ]]>
                </description>
            </item>
    </channel>
</rss>
